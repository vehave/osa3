{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","person","post","id","put","delete","Succeed","message","style","backgroundColor","color","border","Failed","Person","deletePerson","name","number","onClick","Filter","props","text","onChange","type","value","PersonForm","onSubmit","text1","value1","onChange1","text2","value2","onChange2","text3","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","showAll","setShowAll","search","setSearch","errorMessage","setErrorMessage","succeedMessage","setSucceedMessage","personsToShow","filter","includes","useEffect","personService","returnedPersons","console","log","length","class","event","target","preventDefault","found","i","window","confirm","returnedPerson","map","setTimeout","catch","error","concat","key","res","updated","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f8d8d79b.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = person => {\r\n  const request = axios.post(baseUrl, person)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, person) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, person)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update,\r\n  deletePerson: deletePerson \r\n}","\nimport React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Succeed = ({ message }) => {\n  \n  \n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div style={{backgroundColor: \"lightblue\", color: \"green\", border: \"solid\"}}>\n      {message}\n    </div>\n  )\n}\n\nconst Failed = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div style={{backgroundColor: \"lightblue\", color: \"red\", border: \"solid\"}}>\n      {message}\n    </div>\n  )\n}\n\nconst Person = ({person, deletePerson}) => {    \n  \n  return(\n    \n      <div>\n        {person.name} {person.number}\n        <button style={{backgroundColor: \"pink\", color: \"white\", border: \"solid\"}} onClick={deletePerson}>delete</button>\n        </div>\n     \n  ) \n  \n}  \n  \n\nconst Filter = (props) => {    \n  \n  return(\n    \n      <div>\n        {props.text}\n        <input \n          style={{backgroundColor: \"white\", color: \"blue\", border: \"solid\"}}\n          onChange={props.onChange}          \n          type=\"text\"\n          value={props.value}\n          \n        \n          \n          \n          />\n      </div>\n     \n  ) \n} \n\nconst PersonForm = (props) => {    \n  \n  return(\n    \n      <div>\n        <form onSubmit={props.onSubmit}>\n        <div>\n          {props.text1} \n          <input \n          style={{backgroundColor: \"white\", color: \"blue\", border: \"solid\"}}\n          value={props.value1}\n          onChange={props.onChange1}\n          />\n        </div>\n        <div>\n          {props.text2}\n          <input \n          style={{backgroundColor: \"white\", color: \"blue\", border: \"solid\"}}\n          value={props.value2}\n          onChange={props.onChange2}\n          />\n        </div>\n        <div>\n          <button style={{backgroundColor: \"pink\", color: \"white\", border: \"solid\"}} type=\"submit\">{props.text3}</button>\n        </div>\n      </form>\n      </div>\n     \n  ) \n}\n\n const App = () => {\n  const [ persons, setPersons] = useState([]) \n  \n  const [ newName, setNewName ] = useState('')\n\n  const [ newNumber, setNewNumber ] = useState('')\n\n  const [showAll, setShowAll] = useState(true)\n\n  const [ search, setSearch ] = useState('')\n\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const [succeedMessage, setSucceedMessage] = useState(null)\n\n  const personsToShow = showAll\n    ? persons\n    : persons.filter(person => person.name.includes(search))\n\n\n  useEffect(() => {\n      personService      \n      .getAll()      \n      .then(returnedPersons => {        \n        setPersons(returnedPersons)     \n       })  \n      }, \n    [])  \n  console.log('render', persons.length, 'persons')\n\n  const handleChange = (event) => {    \n    console.log(event.target.value)    \n    setNewName(event.target.value) \n  }\n\n  \n\n  const handleNumberChange = (event) => {    \n    console.log(event.target.value)    \n    setNewNumber(event.target.value) \n  }\n\n  const handleFilter = (event) => {    \n    setShowAll(false)\n    console.log(event.target.value)    \n    setSearch(event.target.value) \n  }\n\n  const deletePerson = person => {\n    const id = person.id\n    if(window.confirm(`Delete ${person.name}?`)){\n      personService      \n        .deletePerson(id)      \n        .then(res => {        \n          console.log(res)\n\n          const updated = persons.filter(person => person.id !==id)\n          setPersons(updated) \n          setSucceedMessage(          \n            `Deleted ${person.name}`        \n            )        \n            setTimeout(() => {          \n              setSucceedMessage(null)        \n            }, 3000)       \n              \n      })\n    }\n    \n  }\n  \n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const person = {\n      name: newName,\n      number: newNumber,\n      \n    }\n    let found = false;\n    let id = -100;\n    for(let i = 0; i < persons.length; i++) {\n      if (persons[i].name === newName) {\n        found = true;\n        id = persons[i].id\n        break;\n      }\n    }\n\n    if(found === true){\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with the new one`)){\n        personService      \n        .update(id, person)      \n        .then(returnedPerson => {        \n          setPersons(persons.map(person => person.id !== id ? person : returnedPerson))        \n          setSucceedMessage(          \n            `The old number of ${newName} has replaced with the new one`        \n            )        \n            setTimeout(() => {          \n              setSucceedMessage(null)        \n            }, 3000)\n          setNewName('')\n          setNewNumber('')     \n        })\n        .catch(error => {\n          setErrorMessage(          \n          `Information of ${newName} has already removed from server`        \n          )        \n          setTimeout(() => {          \n            setErrorMessage(null)        \n          }, 3000)\n          setPersons(persons.filter(person => person.id !== id))\n        })\n      }\n    }\n    else{\n      personService      \n      .create(person)      \n      .then(returnedPerson => {        \n        setPersons(persons.concat(returnedPerson)) \n        setSucceedMessage(          \n          `Added ${newName}`        \n          )        \n          setTimeout(() => {          \n            setSucceedMessage(null)        \n          }, 3000)       \n        setNewName('')\n        setNewNumber('')     \n      })\n      .catch(error => {\n        \n        setErrorMessage(          \n          error.response.data.error       \n          )  \n          console.log(errorMessage)      \n          setTimeout(() => {          \n            setErrorMessage(null)        \n          }, 3000)\n      })\n\n    }\n    \n  }\n\n  return (\n    <div style={{backgroundColor: \"lightblue\", color: \"white\", class: \"w3-container\"}}>\n    <div style={{backgroundColor: \"lightblue\", color: \"white\", class: \"w3-content\"}}>\n      <Succeed message={succeedMessage} />\n      <Failed message={errorMessage} />\n      <h2>Phonebook</h2>\n      \n      <Filter onChange={handleFilter} value={search} text='Filter to show with'\n        \n        \n      />\n    </div>\n    <div style={{backgroundColor: \"lightblue\", color: \"white\", class: \"w3-content\"}}>  \n      <h2>Add a new</h2>\n      <PersonForm onSubmit={addPerson} text1=\"name:\" value1={newName} onChange1={handleChange} text2=\"number:\" value2={newNumber} \n        onChange2={handleNumberChange} text3=\"add\"/>\n    </div>\n    <div style={{backgroundColor: \"lightblue\", color: \"white\", class: \"w3-content\"}}>  \n      <h2>Numbers</h2>\n      \n      {personsToShow.map(person => \n          <Person\n            key={person.id}\n            person={person} \n            deletePerson={() => deletePerson(person)} /> )}\n      \n    </div>\n    </div>\n  )\n\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}